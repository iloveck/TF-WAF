name: $(BuildDefinitionName).$(Build.SourceBranchName)$(Rev:.r)

variables:
  WebAppName: 'webservertestpoc'
  WebProjectName: 'mglo-web'
  NonProdAzureSubscription: 'WEBAKSPRD05142019'
  DevBranch: 'refs/heads/feature/TASK-5519_initial_cicd'
  DistributionFolder: 'dist'
  TestsFolder: 'tests'
  CoverageFolder: 'coverage'

# During initial development, the "dev" environment will be updated daily at noon
# This is to balance keeping it updated with constant deployment instability.
# Later this will become a Daily QA build with dev being continuously updated.
#warning: UTC time
schedules:
- cron: "30 2 * * *"
  displayName: Daily Dev build
  branches:
    include:
    - feature/TASK-5519_initial_cicd
  always: 'false'

trigger:
- master
- develop
- feature/*
- release/*

stages:
  - stage: Build
    jobs:
    - job: Build_app
      steps:
      - task: Npm@1
        displayName: 'Npm Install'
        inputs:
          command: 'install'
      - script: 'sudo npm install -g @angular/cli@latest'
        displayName: angularCli install
      - task: Npm@1
        displayName: 'Npm Build'
        inputs:
          command: 'custom'
          customCommand: 'run build'
      - task: Npm@1
        displayName: 'Npm Test'
        continueOnError: true
        inputs:
          command: 'custom'
          customCommand: 'run test'
      - task: PublishTestResults@2
        displayName: 'Publish Test Results'
        inputs:
          testResultsFormat: 'JUnit' # Options: JUnit, NUnit, VSTest, xUnit, cTest
          testResultsFiles: '$(System.DefaultWorkingDirectory)/$(TestsFolder)/$(WebProjectName)/*.xml'
          searchFolder: '$(System.DefaultWorkingDirectory)' # Optional
          failTaskOnFailedTests: false # Optional
      - task: PublishCodeCoverageResults@1
        displayName: 'Publish Code Coverage'
        inputs:
          codeCoverageTool: 'Cobertura'
          summaryFileLocation: '$(System.DefaultWorkingDirectory)/$(CoverageFolder)/$(WebProjectName)/*.xml'
          reportDirectory: '$(System.DefaultWorkingDirectory)/$(CoverageFolder)/$(WebProjectName)'
          failIfCoverageEmpty: true
      - task: ArchiveFiles@2
        displayName: 'Zip Deployment Files'
        condition: and(succeeded(), or(eq(variables['force_deployment'], 'true'), and(eq(variables['Build.SourceBranch'], variables['DevBranch']),eq(variables['Build.Reason'], 'Schedule')) ))
        inputs:
          rootFolderOrFile: "$(System.DefaultWorkingDirectory)/$(DistributionFolder)/$(WebProjectName)"
          includeRootFolder: false
          archiveFile: "$(System.DefaultWorkingDirectory)/build$(Build.BuildId).zip"
      - task: PublishPipelineArtifact@1
        displayName: 'Publish Deployment Archive'
        condition: and(succeeded(), or(eq(variables['force_deployment'], 'true'), and(eq(variables['Build.SourceBranch'], variables['DevBranch']),eq(variables['Build.Reason'], 'Schedule')) ))
        inputs:
          targetPath: '$(System.DefaultWorkingDirectory)/build$(Build.BuildId).zip'
          artifact: $(DistributionFolder)
          publishLocation: 'pipeline'
  - stage: Deploy
    jobs:
    - deployment: Deploy_to_Dev
      condition: and(succeeded(), or(eq(variables['force_deployment'], 'true'), and(eq(variables['Build.SourceBranch'], variables['DevBranch']),eq(variables['Build.Reason'], 'Schedule')) ))
      environment: development
      timeoutInMinutes: 10
      strategy:
        runOnce:
          deploy:
            steps:
            - task: DownloadPipelineArtifact@2
              displayName: 'Download Deployment Archive'
              inputs:
                artifactName: $(DistributionFolder)
                downloadPath: '$(System.DefaultWorkingDirectory)'
            - task: AzureRmWebAppDeployment@4
              inputs:
                ConnectionType: 'AzureRM'
                azureSubscription: $(NonProdAzureSubscription)
                appType: 'webApp'
                WebAppName: $(WebAppName)
                packageForLinux: '$(System.DefaultWorkingDirectory)/**/*.zip'
