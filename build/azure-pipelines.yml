name: $(BuildDefinitionName).$(Build.SourceBranchName)$(Rev:.r)

resources:
  repositories:
    - repository: MembershipAutomation
      type: git
      name: Membership/Membership-Automation
      ref:  master


variables:
  WebAppName: 'webservertestpoc'
  WebProjectName: 'mglo-web'
  NonProdAzureSubscription: 'WEBAKSPRD05142019'
  DevBranch: 'refs/heads/develop'
  DistributionFolder: 'dist'
  TestsFolder: 'tests'
  CoverageFolder: 'coverage'
  SelfRepositoryName: "MGLO-Web"
  AutomationRepo: "Membership-Automation"

trigger:
- master
- develop
- feature/*
- release/*


/*
*======================================+=======================================*
*                                                                              *
*                                 Build Stage                                  *
*                                                                              *
*==============================================================================*
*/
stages:
  - stage: Build
    jobs:
# -------------------------------- Build IAC ----------------------------------*
    - job: Build_IAC
    steps:
    - checkout: self
    - checkout: MembershipAutomation
    - task: CopyFiles@2
      displayName: 'Copy TerraForm Code'
      inputs:
        sourceFolder: $(SelfRepositoryName)/deploy/terraform
        contents: '**'
        cleanTargetFolder: true
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
    - task: CopyFiles@2
      displayName: 'Copy TerraForm Templates'
      inputs:
        sourceFolder: '$(AutomationRepo)/templates/terraform/modules'
        contents: '**'
        cleanTargetFolder: false
        TargetFolder: '$(Build.ArtifactStagingDirectory)/modules'
        OverWrite: true
    - task: CopyFiles@2
      displayName: 'Copy Deploy Powershell Code'
      inputs:
        sourceFolder: $(SelfRepositoryName)/deploy/powershell
        contents: '**'
        cleanTargetFolder: false
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
    - task: PublishPipelineArtifact@1
      displayName: 'Publish IAC Artifacts '
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)'
        artifact: 'terraform'
        publishLocation: 'pipeline'
# -------------------------------- Build APP ----------------------------------*
    - job: Build_APP
      steps:
      - task: Npm@1
        displayName: 'Npm Install !'
        inputs:
          command: 'install'
      - script: 'sudo npm install -g @angular/cli@latest'
        displayName: angularCli install
      - task: Npm@1
        displayName: 'Npm Build'
        inputs:
          command: 'custom'
          customCommand: 'run build'
      - task: Npm@1
        displayName: 'Npm Test'
        continueOnError: true
        inputs:
          command: 'custom'
          customCommand: 'run test'
      - task: PublishTestResults@2
        condition: always ()
        displayName: 'Publish Test Results'
        inputs:
          testResultsFormat: 'JUnit' # Options: JUnit, NUnit, VSTest, xUnit, cTest
          testResultsFiles: '$(System.DefaultWorkingDirectory)/$(TestsFolder)/$(WebProjectName)/*.xml'
          searchFolder: '$(System.DefaultWorkingDirectory)' # Optional
          failTaskOnFailedTests: false # Optional
      - task: PublishCodeCoverageResults@1
        condition: always ()
        displayName: 'Publish Code Coverage'
        inputs:
          codeCoverageTool: 'Cobertura'
          summaryFileLocation: '$(System.DefaultWorkingDirectory)/$(CoverageFolder)/$(WebProjectName)/*.xml'
          reportDirectory: '$(System.DefaultWorkingDirectory)/$(CoverageFolder)/$(WebProjectName)'
          failIfCoverageEmpty: false
      - task: ArchiveFiles@2
        displayName: 'Zip Deployment Files'
        condition: and(succeeded(), or(eq(variables['force_deployment'], 'true'), eq(variables['Build.SourceBranch'], variables['DevBranch']) ))
        inputs:
          rootFolderOrFile: "$(System.DefaultWorkingDirectory)/$(DistributionFolder)/$(WebProjectName)"
          includeRootFolder: false
          archiveFile: "$(System.DefaultWorkingDirectory)/build$(Build.BuildId).zip"
      - task: PublishPipelineArtifact@1
        displayName: 'Publish Deployment Archive'
        condition: and(succeeded(), or(eq(variables['force_deployment'], 'true'), eq(variables['Build.SourceBranch'], variables['DevBranch']) ))
        inputs:
          targetPath: '$(System.DefaultWorkingDirectory)/build$(Build.BuildId).zip'
          artifact: $(DistributionFolder)
          publishLocation: 'pipeline'
/*
*======================================+=======================================*
*                                                                              *
*                                Deploy Stage                                  *
*                                                                              *
*==============================================================================*
*/

  - stage: Deploy
    jobs:
    - deployment: Deploy_to_Dev
      condition: and(succeeded(), or(eq(variables['force_deployment'], 'true'), eq(variables['Build.SourceBranch'], variables['DevBranch']) ))
      environment: development
      timeoutInMinutes: 10
      strategy:
        runOnce:
          deploy:
            steps:
            - task: DownloadPipelineArtifact@2
              displayName: 'Download Deployment Archive'
              inputs:
                artifactName: $(DistributionFolder)
                downloadPath: '$(System.DefaultWorkingDirectory)'
            - task: AzureRmWebAppDeployment@4
              inputs:
                ConnectionType: 'AzureRM'
                azureSubscription: $(NonProdAzureSubscription)
                appType: 'webApp'
                WebAppName: $(WebAppName)
                packageForLinux: '$(System.DefaultWorkingDirectory)/**/*.zip'
